
global:
  node:
    nodeConfig:
      minimumFee: ''
      allowAnyFee: 'false'

    ledgerDistribution:
      awsRegion: us-west-1
      s3Bucket: mobilecoin.chain
      startFrom: last

    networkConfig:
      threshold: '3'
      peers:
        1:
          peer:
            hostname: '{{ printf "peer1.%s.development.mobilecoin.com" .Release.Namespace }}'
            port: '443'
          signerPublicKey: ''
          ledgerArchiveLocation: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node1.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'
        2:
          peer:
            hostname: '{{ printf "peer2.%s.development.mobilecoin.com" .Release.Namespace }}'
            port: '443'
          signerPublicKey: ''
          ledgerArchiveLocation: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node2.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'
        3:
          peer:
            hostname: '{{ printf "peer3.%s.development.mobilecoin.com" .Release.Namespace }}'
            port: '443'
          signerPublicKey: ''
          ledgerArchiveLocation: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node3.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'
        4:
          peer:
            hostname: '{{ printf "peer4.%s.development.mobilecoin.com" .Release.Namespace }}'
            port: '443'
          signerPublicKey: ''
          ledgerArchiveLocation: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node4.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'
        5:
          peer:
            hostname: '{{ printf "peer5.%s.development.mobilecoin.com" .Release.Namespace }}'
            port: '443'
          signerPublicKey: ''
          ledgerArchiveLocation: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node5.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'

mcCoreCommonConfig:
  enabled: true
  fullnameOverride: mc-core-common-config
  mobileCoinNetwork:
    network: '{{ .Release.Namespace }}'
    partner: 'dev'
  mobilecoind:
    threshold: '3'
    nodes:
    - client: '{{ printf "node1.%s.development.mobilecoin.com:443" .Release.Namespace }}'
      txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node1.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'
    - client: '{{ printf "node2.%s.development.mobilecoin.com:443" .Release.Namespace }}'
      txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node2.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'
    - client: '{{ printf "node3.%s.development.mobilecoin.com:443" .Release.Namespace }}'
      txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node3.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'
    - client: '{{ printf "node4.%s.development.mobilecoin.com:443" .Release.Namespace }}'
      txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node4.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'
    - client: '{{ printf "node5.%s.development.mobilecoin.com:443" .Release.Namespace }}'
      txSourceUrl: '{{ with .Values.global.node.ledgerDistribution }}{{ printf "https://s3-%s.amazonaws.com/%s/%s/" .awsRegion .s3Bucket (printf "node5.%s.development.mobilecoin.com" $.Release.Namespace) }}{{ end }}'


consensusNodeConfig1:
  enabled: true
  fullnameOverride: consensus-node-1
  node:
    client:
      hostname: '{{ printf "node1.%s.development.mobilecoin.com" .Release.Namespace }}'
    peer:
      hostname: '{{ printf "peer1.%s.development.mobilecoin.com" .Release.Namespace }}'

consensusNodeConfig2:
  enabled: true
  fullnameOverride: consensus-node-2
  node:
    client:
      hostname: '{{ printf "node2.%s.development.mobilecoin.com" .Release.Namespace }}'
    peer:
      hostname: '{{ printf "peer2.%s.development.mobilecoin.com" .Release.Namespace }}'

consensusNodeConfig3:
  enabled: true
  fullnameOverride: 'consensus-node-3'
  node:
    client:
      hostname: '{{ printf "node3.%s.development.mobilecoin.com" .Release.Namespace }}'
    peer:
      hostname: '{{ printf "peer3.%s.development.mobilecoin.com" .Release.Namespace }}'

consensusNodeConfig4:
  enabled: true
  fullnameOverride: 'consensus-node-4'
  node:
    client:
      hostname: '{{ printf "node4.%s.development.mobilecoin.com" .Release.Namespace }}'
    peer:
      hostname: '{{ printf "peer4.%s.development.mobilecoin.com" .Release.Namespace }}'

consensusNodeConfig5:
  enabled: true
  fullnameOverride: 'consensus-node-5'
  node:
    client:
      hostname: '{{ printf "node5.%s.development.mobilecoin.com" .Release.Namespace }}'
    peer:
      hostname: '{{ printf "peer5.%s.development.mobilecoin.com" .Release.Namespace }}'

fogIngestConfig:
  enabled: true
  fogRecoveryDatabase:
    configMap:
      enabled: true
    secret:
      enabled: true

# fogPublicFQDN:
#   configMap:
#     external: true
#     name: fog-public-fqdn
#   value: ""
#   # Since you can't put structured data in a config-map entry
#   # String value, list of SANs one per line
#   fogReportSANs: ""
#   # fogReportSANs: |-
#   #   one.mc.com
#   #   two.mc.com

# fogReport:
#   signingCert:
#     crt: ""
#     key: ""
#   configMap:
#     data:
#       # https://docs.diesel.rs/diesel/r2d2/struct.Builder.html
#       POSTGRES_IDLE_TIMEOUT: "60"
#       POSTGRES_MAX_LIFETIME: "120"
#       POSTGRES_CONNECTION_TIMEOUT: "5"
#       POSTGRES_MAX_CONNECTIONS: "3"

# fogView:
#   configMap:
#     data:
#       POSTGRES_IDLE_TIMEOUT: "60"
#       POSTGRES_MAX_LIFETIME: "120"
#       POSTGRES_CONNECTION_TIMEOUT: "5"
#       POSTGRES_MAX_CONNECTIONS: "3"

# fogLedger:
#   configMap:
#     data:
#       POSTGRES_IDLE_TIMEOUT: "60"
#       POSTGRES_MAX_LIFETIME: "120"
#       POSTGRES_CONNECTION_TIMEOUT: "5"
#       POSTGRES_MAX_CONNECTIONS: "3"

# fogIngest:
#   configMap:
#     data:
#       POSTGRES_IDLE_TIMEOUT: "60"
#       POSTGRES_MAX_LIFETIME: "120"
#       POSTGRES_CONNECTION_TIMEOUT: "5"
#       POSTGRES_MAX_CONNECTIONS: "3"

# ### helm install fog-recovery bitnami/postgresql -n <namespace> --set postgresqlDatabase=fog --set auth.existingSecret=fog-recovery-postgresql
# recoveryDatabase:
#   hostname: fog-recovery-postgresql
#   password: postgres
#   username: postgres
#   database: fog
#   port: "5432"
#   options: "?sslmode=disable"
